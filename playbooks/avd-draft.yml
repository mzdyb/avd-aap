---
# Comprehensive Arista AVD Data Center Automation Playbook
# This playbook provides end-to-end automation for Arista data center networks
# including configuration generation, deployment, documentation, and validation

- name: "Phase 1: Pre-deployment Validation and Preparation"
  hosts: FABRIC
  gather_facts: false
  connection: local
  vars:
    ansible_connection: local
  
  tasks:
    - name: Display playbook information
      ansible.builtin.debug:
        msg:
          - "=== Arista AVD Data Center Automation ==="
          - "Fabric: {{ fabric_name | default('FABRIC') }}"
          - "Underlay Protocol: {{ underlay_routing_protocol | default('ebgp') }}"
          - "Overlay Protocol: {{ overlay_routing_protocol | default('ebgp') }}"
          - "Total Devices: {{ groups['FABRIC'] | length }}"
          - "Spines: {{ groups['DC1_SPINES'] | length }}"
          - "Leaves: {{ groups['DC1_L3_LEAVES'] | length }}"
      tags:
        - always
        - info

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ inventory_dir }}/intended"
        - "{{ inventory_dir }}/intended/structured_configs"
        - "{{ inventory_dir }}/intended/configs"
        - "{{ inventory_dir }}/documentation"
        - "{{ inventory_dir }}/documentation/devices"
      delegate_to: localhost
      run_once: true
      tags:
        - always
        - preparation

    - name: Validate inventory structure
      ansible.builtin.assert:
        that:
          - groups['DC1_SPINES'] is defined
          - groups['DC1_L3_LEAVES'] is defined
          - groups['DC1_SPINES'] | length > 0
          - groups['DC1_L3_LEAVES'] | length > 0
        fail_msg: "Invalid inventory structure. Ensure DC1_SPINES and DC1_L3_LEAVES groups are defined."
        success_msg: "Inventory structure validation passed"
      run_once: true
      tags:
        - always
        - validation

- name: "Phase 2: Generate AVD Structured Configurations"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Generate AVD structured configurations and fabric documentation
      ansible.builtin.import_role:
        name: arista.avd.eos_designs
      vars:
        # Enable structured config validation
        avd_data_validation_mode: error
        avd_data_conversion_mode: error
      tags:
        - build
        - structured_config
        - documentation

    - name: Display generated structured config files
      ansible.builtin.find:
        paths: "{{ inventory_dir }}/intended/structured_configs"
        patterns: "*.yml"
      register: structured_configs
      delegate_to: localhost
      run_once: true
      tags:
        - build
        - structured_config

    - name: Show structured config summary
      ansible.builtin.debug:
        msg: "Generated {{ structured_configs.files | length }} structured configuration files"
      run_once: true
      tags:
        - build
        - structured_config

- name: "Phase 3: Generate Device Configurations"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Generate device configurations and documentation
      ansible.builtin.import_role:
        name: arista.avd.eos_cli_config_gen
      vars:
        # Enable configuration validation
        avd_data_validation_mode: error
      register: device_configs
      tags:
        - build
        - device_config

    - name: Display generated device configurations
      ansible.builtin.find:
        paths: "{{ inventory_dir }}/intended/configs"
        patterns: "*.cfg"
      register: device_config_files
      delegate_to: localhost
      run_once: true
      tags:
        - build
        - device_config

    - name: Show device configuration summary
      ansible.builtin.debug:
        msg: 
          - "Generated {{ device_config_files.files | length }} device configuration files"
          - "Configuration files saved to: {{ inventory_dir }}/intended/configs/"
      run_once: true
      tags:
        - build
        - device_config

- name: "Phase 4: Pre-deployment Device Connectivity Check"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Test device connectivity
      arista.eos.eos_command:
        commands:
          - show version
      register: connectivity_test
      ignore_errors: true
      tags:
        - deploy
        - connectivity_check

    - name: Display connectivity results
      ansible.builtin.debug:
        msg: "Device {{ inventory_hostname }} is {{ 'reachable' if connectivity_test is succeeded else 'unreachable' }}"
      tags:
        - deploy
        - connectivity_check

    - name: Fail if any device is unreachable
      ansible.builtin.fail:
        msg: "Device {{ inventory_hostname }} is unreachable. Please check connectivity before deployment."
      when: 
        - connectivity_test is failed
        - strict_connectivity_check | default(false) | bool
      tags:
        - deploy
        - connectivity_check

- name: "Phase 5: Configuration Backup (Optional)"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ inventory_dir }}/config_backup"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      when: backup_configs | default(false) | bool
      tags:
        - deploy
        - backup

    - name: Backup current device configuration
      arista.eos.eos_config:
        backup: true
        backup_options:
          filename: "{{ inventory_hostname }}_{{ ansible_date_time.epoch }}.cfg"
          dir_path: "{{ inventory_dir }}/config_backup"
      when: backup_configs | default(false) | bool
      tags:
        - deploy
        - backup

- name: "Phase 6: Deploy Configurations to Devices"
  hosts: FABRIC
  gather_facts: false
  serial: "{{ deploy_serial | default(1) }}"
  
  tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg:
          - "Deploying configuration to: {{ inventory_hostname }}"
          - "Management IP: {{ ansible_host }}"
          - "Device Type: {{ type | default('unknown') }}"
      tags:
        - deploy

    - name: Deploy configurations to devices
      ansible.builtin.import_role:
        name: arista.avd.eos_config_deploy_eapi
      vars:
        # Configuration deployment options
        eos_config_deploy_eapi_diff: true
        eos_config_deploy_eapi_replace: true
      when: deploy_configs | default(true) | bool
      tags:
        - deploy
        - config_deploy

    - name: Wait for device to be ready after configuration deployment
      arista.eos.eos_command:
        commands:
          - show version
      retries: 6
      delay: 10
      when: deploy_configs | default(true) | bool
      tags:
        - deploy
        - config_deploy

- name: "Phase 7: Post-deployment Validation"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Verify BGP sessions
      arista.eos.eos_command:
        commands:
          - show bgp summary
      register: bgp_status
      tags:
        - validate
        - bgp

    - name: Verify EVPN routes (for leaves only)
      arista.eos.eos_command:
        commands:
          - show bgp evpn summary
      register: evpn_status
      when: "'leaf' in type | default('')"
      tags:
        - validate
        - evpn

    - name: Verify MLAG status (for MLAG pairs only)
      arista.eos.eos_command:
        commands:
          - show mlag
      register: mlag_status
      when: "'leaf' in type | default('') and inventory_hostname in groups['DC1_L3_LEAVES']"
      tags:
        - validate
        - mlag

    - name: Verify interface status
      arista.eos.eos_command:
        commands:
          - show interfaces status
      register: interface_status
      tags:
        - validate
        - interfaces

    - name: Display validation summary
      ansible.builtin.debug:
        msg:
          - "=== Post-deployment Validation Summary for {{ inventory_hostname }} ==="
          - "BGP Status: {{ 'Checked' if bgp_status is defined else 'Skipped' }}"
          - "EVPN Status: {{ 'Checked' if evpn_status is defined else 'Skipped' }}"
          - "MLAG Status: {{ 'Checked' if mlag_status is defined else 'Skipped' }}"
          - "Interface Status: {{ 'Checked' if interface_status is defined else 'Skipped' }}"
      tags:
        - validate

- name: "Phase 8: Generate Network Documentation"
  hosts: localhost
  gather_facts: false
  connection: local
  
  tasks:
    - name: Generate fabric documentation
      ansible.builtin.template:
        src: "{{ item.src | default(item) }}"
        dest: "{{ inventory_dir }}/documentation/{{ item.dest | default(item | basename | regex_replace('\\.j2$', '')) }}"
      loop:
        - "fabric_overview.md"
        - "deployment_summary.md"
      ignore_errors: true
      tags:
        - documentation

    - name: Display documentation summary
      ansible.builtin.debug:
        msg:
          - "=== Documentation Generated ==="
          - "Fabric Documentation: {{ inventory_dir }}/documentation/"
          - "Device Documentation: {{ inventory_dir }}/documentation/devices/"
          - "Structured Configs: {{ inventory_dir }}/intended/structured_configs/"
          - "Device Configs: {{ inventory_dir }}/intended/configs/"
      tags:
        - documentation
        - always

- name: "Phase 9: ANTA Testing (Optional)"
  hosts: FABRIC
  gather_facts: false
  
  tasks:
    - name: Run ANTA tests
      ansible.builtin.import_role:
        name: arista.avd.eos_validate_state
      when: 
        - run_anta_tests | default(false) | bool
        - anta_tests_enabled | default(false) | bool
      tags:
        - validate
        - anta

    - name: Display ANTA test results
      ansible.builtin.debug:
        msg: "ANTA tests completed. Check {{ inventory_dir }}/anta/reports/ for detailed results."
      when: 
        - run_anta_tests | default(false) | bool
        - anta_tests_enabled | default(false) | bool
      run_once: true
      tags:
        - validate
        - anta

- name: "Phase 10: Deployment Summary"
  hosts: localhost
  gather_facts: false
  connection: local
  
  tasks:
    - name: Display final summary
      ansible.builtin.debug:
        msg:
          - "=== Arista AVD Data Center Automation Complete ==="
          - "Fabric: {{ fabric_name | default('FABRIC') }}"
          - "Total Devices Processed: {{ groups['FABRIC'] | length }}"
          - "Configurations Generated: ✓"
          - "Documentation Created: ✓"
          - "Deployment Status: {{ 'Completed' if deploy_configs | default(true) | bool else 'Skipped' }}"
          - "Validation Status: ✓"
          - ""
          - "Generated Files:"
          - "  - Device Configs: {{ inventory_dir }}/intended/configs/"
          - "  - Structured Configs: {{ inventory_dir }}/intended/structured_configs/"
          - "  - Documentation: {{ inventory_dir }}/documentation/"
          - "  - Backup Configs: {{ inventory_dir }}/config_backup/ (if enabled)"
          - ""
          - "To deploy only: ansible-playbook avd.yml --tags deploy"
          - "To build only: ansible-playbook avd.yml --tags build"
          - "To validate only: ansible-playbook avd.yml --tags validate"
      tags:
        - always

